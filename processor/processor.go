package processor

import (
	"os"

	"github.com/drewlarso/chip8-emulator/display"
	"github.com/drewlarso/chip8-emulator/keyboard"
)

const startAddress uint16 = 0x200

var font [80]byte = [80]byte{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}

type Processor struct {
	memory        [4096]byte
	registers     [16]byte
	indexRegister uint16
	delayTimer    byte
	soundTimer    byte
	pc            uint16
	sp            byte
	stack         [16]uint16
}

func NewProcessor() *Processor {
	return &Processor{
		memory:        [4096]byte{},
		registers:     [16]byte{},
		indexRegister: 0,
		delayTimer:    255,
		soundTimer:    255,
		pc:            0,
		sp:            0,
		stack:         [16]uint16{},
	}
}

func (p *Processor) LoadROM(filename string) {
	content, err := os.ReadFile(filename)
	if err != nil {
		panic(err)
	}
	copy(p.memory[startAddress:], content)
}

func (p *Processor) Cycle(display *display.Display, keyboard *keyboard.Keyboard) {}

func (p *Processor) UpdateTimers() {
	if p.delayTimer != 0 {
		p.delayTimer--
	}
	if p.soundTimer != 0 {
		p.soundTimer--
	}
}
